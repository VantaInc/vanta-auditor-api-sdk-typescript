/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ControlSource,
  ControlSource$inboundSchema,
  ControlSource$outboundSchema,
} from "./controlsource.js";

/**
 * The control's owner.
 */
export type ControlOwner = {
  /**
   * Unique identifier for the person.
   */
  id: string;
  /**
   * Name of the person that is shown in product.
   */
  displayName: string;
  /**
   * Email address of the person.
   */
  emailAddress: string;
};

export type Control = {
  /**
   * The control's unique ID.
   */
  id: string;
  /**
   * The control's external ID.
   */
  externalId: string | null;
  /**
   * The control's name.
   */
  name: string;
  /**
   * The control's description.
   */
  description: string;
  source: ControlSource;
  /**
   * The security domains that the control belongs to.
   */
  domains: Array<string>;
  /**
   * The control's owner.
   */
  owner: ControlOwner | null;
  /**
   * The control's GDPR role, if the control is a GDPR control.
   */
  role?: string | undefined;
};

/** @internal */
export const ControlOwner$inboundSchema: z.ZodType<
  ControlOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  displayName: z.string(),
  emailAddress: z.string(),
});

/** @internal */
export type ControlOwner$Outbound = {
  id: string;
  displayName: string;
  emailAddress: string;
};

/** @internal */
export const ControlOwner$outboundSchema: z.ZodType<
  ControlOwner$Outbound,
  z.ZodTypeDef,
  ControlOwner
> = z.object({
  id: z.string(),
  displayName: z.string(),
  emailAddress: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControlOwner$ {
  /** @deprecated use `ControlOwner$inboundSchema` instead. */
  export const inboundSchema = ControlOwner$inboundSchema;
  /** @deprecated use `ControlOwner$outboundSchema` instead. */
  export const outboundSchema = ControlOwner$outboundSchema;
  /** @deprecated use `ControlOwner$Outbound` instead. */
  export type Outbound = ControlOwner$Outbound;
}

export function controlOwnerToJSON(controlOwner: ControlOwner): string {
  return JSON.stringify(ControlOwner$outboundSchema.parse(controlOwner));
}

export function controlOwnerFromJSON(
  jsonString: string,
): SafeParseResult<ControlOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControlOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControlOwner' from JSON`,
  );
}

/** @internal */
export const Control$inboundSchema: z.ZodType<Control, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    externalId: z.nullable(z.string()),
    name: z.string(),
    description: z.string(),
    source: ControlSource$inboundSchema,
    domains: z.array(z.string()),
    owner: z.nullable(z.lazy(() => ControlOwner$inboundSchema)),
    role: z.string().optional(),
  });

/** @internal */
export type Control$Outbound = {
  id: string;
  externalId: string | null;
  name: string;
  description: string;
  source: string;
  domains: Array<string>;
  owner: ControlOwner$Outbound | null;
  role?: string | undefined;
};

/** @internal */
export const Control$outboundSchema: z.ZodType<
  Control$Outbound,
  z.ZodTypeDef,
  Control
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  name: z.string(),
  description: z.string(),
  source: ControlSource$outboundSchema,
  domains: z.array(z.string()),
  owner: z.nullable(z.lazy(() => ControlOwner$outboundSchema)),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Control$ {
  /** @deprecated use `Control$inboundSchema` instead. */
  export const inboundSchema = Control$inboundSchema;
  /** @deprecated use `Control$outboundSchema` instead. */
  export const outboundSchema = Control$outboundSchema;
  /** @deprecated use `Control$Outbound` instead. */
  export type Outbound = Control$Outbound;
}

export function controlToJSON(control: Control): string {
  return JSON.stringify(Control$outboundSchema.parse(control));
}

export function controlFromJSON(
  jsonString: string,
): SafeParseResult<Control, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Control$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Control' from JSON`,
  );
}
